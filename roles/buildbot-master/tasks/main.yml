---
# tasks file for buildbot-master

- name: Create buildbot data volume
  docker_volume:
    name: '{{ buildbot_volume_data }}'

- name: Create config directory
  file:
    path: "{{ buildbot_hostdir_config }}"
    state: directory

- name: Populate config files
  copy:
    src: "{{ item }}"
    dest: "{{ buildbot_hostdir_config }}/{{ item | basename }}"
    group: '{{ buildbot_gid }}'
    owner: '{{ buildbot_uid }}'
    mode: "u=rw,g=,o="
    unsafe_writes: yes
  register: configs
  loop:
    - novatech.py

- name: Populate config templates
  template:
    src: "{{ item }}.j2"
    dest: "{{ buildbot_hostdir_config }}/{{ item }}"
    group: '{{ buildbot_gid }}'
    owner: '{{ buildbot_uid }}'
    mode: "u=rw,g=,o="
    unsafe_writes: yes
  register: templates
  loop:
    - master.cfg
    - buildbot.tac
    - known_hosts

- name: Create credential directory
  file:
    path: '{{ buildbot_hostdir_ssl }}'
    state: directory

- name: Populate credential files
  copy:
    src: '{{ item.src }}'
    dest: "{{ item.dest }}"
    group: '{{ buildbot_uid }}'
    owner: '{{ buildbot_uid }}'
    mode: "u=rw,g=,o="
    unsafe_writes: yes
  register: credentials
  loop:
    - src: '{{ buildbot_sshkey }}'
      dest: '{{ buildbot_hostdir_config }}/{{ master_sshkey }}'
    - src: '{{ buildbot_tlsca }}'
      dest: '{{ buildbot_hostdir_ssl }}/{{ master_tlsca }}'
    - src: '{{ buildbot_tlskey }}'
      dest: '{{ buildbot_hostdir_ssl }}/{{ master_tlskey }}'
    - src: '{{ buildbot_tlspem }}'
      dest: '{{ buildbot_hostdir_ssl }}/{{ master_tlspem }}'

- name: Create image source directory
  file:
    path: "{{ buildbot_image_dir }}"
    state: directory

- name: Deploy image source
  synchronize:
    archive: yes
    checksum: yes
    compress: yes
    delete: yes
    src: docker/
    dest: '{{ buildbot_image_dir }}/'
  register: deploy_source

- name: Create buildbot master image
  docker_image:
    build:
      args: '{{ buildbot_image_args }}'
      path: '{{ buildbot_image_dir }}'
      pull: yes
    name: '{{ buildbot_image_name }}'
    source: build
    force_source: "{{ deploy_source.changed }}"

- name: Create buildbot network
  docker_network:
    name: '{{ item.name }}'
    state: present
  loop: '{{ buildbot_networks }}'

- name: Start buildbot container
  docker_container:
    comparisons: {'*': strict}
    env: '{{ buildbot_env }}'
    hostname: '{{ buildbot_hostname }}'
    image: '{{ buildbot_image_name }}'
    name: '{{ buildbot_name }}'
    networks: '{{ buildbot_networks }}'
    networks_cli_compatible: yes
    ports: '{{ buildbot_port_args }}'
    restart: '{{
      configs.changed
      or templates.changed
      or deploy_source.changed }}'
    restart_policy: '{{ buildbot_restart_policy }}'
    state: started
    volumes: '{{ buildbot_volumes }}'
    working_dir: '{{ buildbot_data_path }}'

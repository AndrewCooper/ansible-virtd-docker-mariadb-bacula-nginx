---
# tasks file for buildbot-worker-ntel

# This will generate passwords for these accounts.
- assert:
    that:
    - buildbot_worker_ntel_passwd is defined
    - buildbot_worker_ntel_sshkey is defined

- name: Create buildbot cache volume
  docker_volume:
    name: '{{ cache_volume }}'

- name: Populate buildbot cache volume
  loop:
  - /cache
  - /cache/downloads
  - /cache/images
  - /cache/mirrors
  - /cache/releases
  - /cache/sstate
  docker_container:
    name: '{{ container_name }}-bootstrap'
    image: 'alpine:latest'
    volumes:
    - '{{ cache_volume }}:{{ cache_path }}:z'
    detach: no
    cleanup: yes
    command: /bin/ash -c
      "mkdir -p {{item}} &&
      chown -c -R {{buildbot_uid}}:{{buildbot_uid}} {{item}} &&
      chmod -v 777 {{item}}"

- name: Create buildbot data volume
  docker_volume:
    name: '{{ data_volume }}'

- name: Populate buildbot data volume
  loop:
  - /buildbot
  docker_container:
    name: '{{ container_name }}-bootstrap'
    image: 'alpine:latest'
    volumes:
    - '{{ data_volume }}:{{ data_path }}:z'
    detach: no
    cleanup: yes
    command: /bin/ash -c
      "mkdir -p {{item}} &&
      if [ $(stat --printf='%u' '{{item}}') -ne {{buildbot_uid}} ]; then
        chown -c -R {{buildbot_uid}}:{{buildbot_uid}} {{item}};
      fi"

- name: Create config directory
  file:
    path: "{{ config_hostdir }}"
    state: directory

- name: Populate config files
  copy:
    src: "{{ item }}"
    dest: "{{ config_hostdir }}/{{ item | basename }}"
    group: '{{ buildbot_uid }}'
    owner: '{{ buildbot_uid }}'
    mode: "u=rw,g=,o="
    unsafe_writes: yes
  register: configs
  loop:
    - '{{ buildbot_worker_ntel_sshkey }}'

- name: Populate config templates
  template:
    src: "{{ item }}.j2"
    dest: "{{ config_hostdir }}/{{ item }}"
    group: '{{ buildbot_uid }}'
    owner: '{{ buildbot_uid }}'
    mode: "u=rw,g=,o="
    unsafe_writes: yes
  register: templates
  loop:
    - buildbot.tac
    - known_hosts
    - netrc
    - pydistutils.cfg

- name: Populate archival script
  copy:
    src: ci-archive.sh
    dest: '{{ config_hostdir }}/ci-archive.sh'
    group: '{{ buildbot_uid }}'
    owner: '{{ buildbot_uid }}'
    mode: 'u=rwx,g=rx,o=rx'
    unsafe_writes: yes

- import_tasks: worker-cert.yml

- name: Create image source directory
  file:
    path: "{{ image_dir }}"
    state: directory

- name: Deploy Image Source
  synchronize:
    archive: yes
    checksum: yes
    compress: yes
    src: '{{ image_repo }}/'
    dest: '{{ image_dir }}/'
  register: deploy_source

- name: Create buildbot worker image
  docker_image:
    build:
      args: '{{ image_args }}'
      network: 'host'
      path: '{{ image_dir }}'
      pull: yes
    name: '{{ image_name }}'
    source: build
    tag: '{{ docker_image_tag }}'
    force_source: "{{ deploy_source.changed }}"

- name: Create buildbot worker network
  docker_network:
    name: '{{ item.name }}'
    state: present
  loop: '{{ buildbot_worker_networks }}'

- name: Start buildbot worker container
  docker_container:
    comparisons: {'*': strict}
    env: '{{ container_env }}'
    hostname: '{{ container_hostname }}'
    image: '{{ image_name }}:{{ docker_image_tag }}'
    name: '{{ container_name }}'
    networks: '{{ buildbot_worker_networks }}'
    networks_cli_compatible: yes
    ports: '{{ container_port_args }}'
    purge_networks: yes
    restart: '{{
      configs.changed
      or templates.changed
      or deploy_source.changed }}'
    restart_policy: '{{ docker_restart_policy }}'
    state: started
    volumes: '{{ container_volumes }}'

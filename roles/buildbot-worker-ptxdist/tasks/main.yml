---
# tasks file for buildbot-worker-ptxdist

# This will generate passwords for these accounts.
- assert:
    that:
    - buildbot_worker_ptxdist_passwd is defined
    - buildbot_worker_ptxdist_sshkey is defined

- name: Create buildbot cache volume
  docker_volume:
    name: '{{ cache_volume }}'

- name: Populate buildbot cache volume
  loop:
  - /cache
  - /cache/ccache
  - /cache/downloads
  - /cache/images
  - /cache/ipkg-repository
  - /cache/releases
  docker_container:
    name: '{{ container_name }}-bootstrap'
    image: 'alpine:latest'
    volumes:
    - '{{ cache_volume }}:{{ cache_path }}:z'
    detach: no
    cleanup: yes
    command: /bin/ash -c
      "mkdir -p {{item}} &&
      chown -c -R {{buildbot_uid}}:{{buildbot_uid}} {{item}} &&
      chmod -v 777 {{item}}"

- name: Create buildbot data volume
  docker_volume:
    name: '{{ data_volume }}'

- name: Populate buildbot data volume
  loop:
  - /buildbot
  docker_container:
    name: '{{ container_name }}-bootstrap'
    image: 'alpine:latest'
    volumes:
    - '{{ data_volume }}:{{ data_path }}:z'
    detach: no
    cleanup: yes
    command: /bin/ash -c
      "mkdir -p {{item}} &&
      if [ $(stat -c '%u' '{{item}}') -ne {{buildbot_uid}} ]; then
        chown -c -R {{buildbot_uid}}:{{buildbot_uid}} {{item}};
      fi"

- name: Create config directory
  file:
    path: '{{ config_hostdir }}'
    state: directory

- name: Populate config files
  copy:
    src: "{{ item }}"
    dest: "{{ config_hostdir }}/{{ item | basename }}"
    group: '{{ buildbot_uid }}'
    owner: '{{ buildbot_uid }}'
    mode: "u=rw,g=,o="
    unsafe_writes: yes
  register: configs
  loop:
    - '{{ buildbot_worker_ptxdist_sshkey }}'

- name: Populate config templates
  template:
    src: "{{ item }}.j2"
    dest: "{{ config_hostdir }}/{{ item }}"
    group: '{{ buildbot_uid }}'
    owner: '{{ buildbot_uid }}'
    mode: "u=rw,g=,o="
    unsafe_writes: yes
  register: templates
  loop:
    - buildbot.tac
    - known_hosts
    - netrc
    - pydistutils.cfg
    - ptxdistrc

- import_tasks: worker-cert.yml

- name: Checkout image repo
  git:
    repo: '{{ image_repo }}'
    version: master
    dest: '{{ image_dir }}'
    force: yes
  register: deploy_source

- name: Create buildbot worker image
  docker_image:
    build:
      args: '{{ image_args }}'
      path: '{{ image_dir }}'
      pull: yes
    name: '{{ image_name }}'
    source: build
    tag: '{{ docker_image_tag }}'
    force_source: "{{ deploy_source.changed }}"

- name: Start buildbot worker container
  docker_container:
    comparisons: {'*': strict}
    env: '{{ container_env }}'
    hostname: '{{ container_hostname }}'
    image: '{{ image_name }}:{{ docker_image_tag }}'
    name: '{{ container_name }}'
    networks: '{{ container_networks }}'
    ports: '{{ container_port_args }}'
    restart: '{{
      configs.changed
      or templates.changed
      or deploy_source.changed }}'
    restart_policy: '{{ docker_restart_policy }}'
    state: started
    volumes: '{{ container_volumes }}'

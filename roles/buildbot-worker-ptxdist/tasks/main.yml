---
# tasks file for buildbot-worker-ptxdist

- name: "Assert a password is defined"
  assert:
    that:
    - buildbot_worker_passwd is defined
    - buildbot_worker_passwd is not none
    fail_msg: "A password must be defined. A default is not provided."

- name: Create buildbot cache volume
  docker_volume:
    name: '{{ buildbot_worker_volume_cache }}'

- name: Create buildbot data volume
  docker_volume:
    name: '{{ buildbot_worker_volume_data }}'

- name: Create config directory
  file:
    path: "{{ buildbot_worker_hostdir_config }}"
    state: directory

- name: Populate config templates
  template:
    src: "{{ item }}.j2"
    dest: "{{ buildbot_worker_hostdir_config }}/{{ item }}"
    group: '{{ buildbot_worker_gid }}'
    owner: '{{ buildbot_worker_uid }}'
    mode: "u=rw,g=,o="
    unsafe_writes: yes
  register: templates
  loop:
    - buildbot.tac
    - known_hosts
    - netrc
    - pydistutils.cfg
    - ptxdistrc

- name: Create credential directory
  file:
    path: '{{ buildbot_worker_hostdir_ssl }}'
    state: directory

- name: Populate credential files
  copy:
    src: '{{ item.src }}'
    dest: "{{ item.dest }}"
    group: '{{ buildbot_worker_gid }}'
    owner: '{{ buildbot_worker_uid }}'
    mode: "u=rw,g=,o="
    unsafe_writes: yes
  register: credentials
  loop:
    - src: '{{ buildbot_worker_ptxdist_sshkey }}'
      dest: '{{ buildbot_worker_hostdir_config }}/{{ worker_sshkey }}'
    - src: '{{ buildbot_tlsca }}'
      dest: '{{ buildbot_worker_hostdir_ssl }}/{{ worker_tlsca }}'
    - src: '{{ buildbot_worker_ptxdist_tlskey }}'
      dest: '{{ buildbot_worker_hostdir_ssl }}/{{ worker_tlskey }}'
    - src: '{{ buildbot_worker_ptxdist_tlspem }}'
      dest: '{{ buildbot_worker_hostdir_ssl }}/{{ worker_tlspem }}'

- name: Create image source directory
  file:
    path: "{{ buildbot_worker_image_dir }}"
    state: directory

- name: Deploy Image Source
  synchronize:
    archive: yes
    checksum: yes
    compress: yes
    delete: yes
    src: '{{ buildbot_worker_image_repo }}/'
    dest: '{{ buildbot_worker_image_dir }}/'
  register: deploy_source

- name: Create buildbot worker image
  docker_image:
    build:
      args: '{{ buildbot_worker_image_args }}'
      dockerfile: '{{ buildbot_worker_image_dockerfile }}'
      network: 'host'
      path: '{{ buildbot_worker_image_dir }}'
      pull: yes
    name: '{{ buildbot_worker_image_name }}'
    source: build
    force_source: '{{ deploy_source.changed }}'

- name: Create buildbot worker network
  docker_network:
    name: '{{ item.name }}'
    state: present
  loop: '{{ buildbot_worker_networks }}'

- name: Start buildbot worker container
  docker_container:
    comparisons: {'*': strict}
    env: '{{ buildbot_worker_env }}'
    hostname: '{{ buildbot_worker_hostname }}'
    image: '{{ buildbot_worker_image_name }}'
    name: '{{ buildbot_worker_container }}'
    networks: '{{ buildbot_worker_networks }}'
    networks_cli_compatible: yes
    ports: '{{ buildbot_worker_port_args }}'
    purge_networks: yes
    restart: '{{
      credentials.changed
      or templates.changed
      or deploy_source.changed }}'
    restart_policy: '{{ buildbot_worker_restart_policy }}'
    state: started
    volumes: '{{ buildbot_worker_volumes }}'

---
# file: roles/docker-mantisbt/tasks/main.yaml

- name: Check preconditions
  assert:
    that:
    - mantisbt_db_root_password is defined
    - mantisbt_db_password is defined

- name: docker_container.conf dir
  file:
    state: directory
    path: '{{ mantisbt_config_dir }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no

# *****************************************************************************
# backup script part

- name: Assemble dir for backup scripts
  file:
    path: /usr/libexec/bacula/backup-scripts
    state: directory

- name: before_backup script part
  template:
    src: before_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.before_backup.mantisbt

- name: after_backup script part
  template:
    src: after_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.after_backup.mantisbt

# *****************************************************************************
# update the Docker restore config

- name: make mantisbt.sh
  template:
    src: mantisbt.sh.j2
    dest: '{{ mantisbt_config_dir }}/mantisbt.sh'
    backup: no
    owner: root
    group: tape
    mode: 'u=rwx,g=rx,o='
    unsafe_writes: yes
  register: config_sh

- name: Create config_inc.php
  template:
    src: config_inc.php.j2
    dest: '{{ mantisbt_config_dir }}/config_inc.php'
    backup: no
    owner: root
    group: root
    mode: 'u=rw,g=r,o='
    unsafe_writes: yes
  register: config_inc

- name: exists - state file
  stat:
    path: '{{ mantisbt_config_dir }}/restore.date.txt'
    get_checksum: False
    get_md5: False
  register: st_mantisbt_restore

# *****************************************************************************
# Update or make the image.
- name: Create image source directory
  file:
    path: '{{ mantisbt_image_dir }}/'
    state: directory

- name: Deploy Image Source
  synchronize:
    archive: yes
    checksum: yes
    compress: yes
    delete: yes
    src: '{{ role_path }}/container/'
    dest: '{{ mantisbt_image_dir }}/'
  register: deploy_source

- name: build image
  docker_image:
    build:
      path: '{{ mantisbt_image_dir }}'
      pull: yes
    name: '{{ mantisbt_image_name }}'
    source: build
    tag: '{{ docker_image_tag }}'
    force_source: "{{ deploy_source.changed }}"

# *****************************************************************************
# Create the data volumes

- name: data-volume container (mysql)
  docker_volume:
    name: '{{ mantisbt_db_dv_name }}'

# *****************************************************************************
# Configure the database

- name: docker_container.conf dir
  file:
    state: directory
    path: '{{ mantisbt_db_config_dir }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no

- name: upload mysql config
  copy:
    src: '{{ item }}'
    dest: '{{ mantisbt_db_config_dir }}/{{ item }}'
  with_items:
  - largefile.cnf
  - character-set.cnf
  register: mysql_config

# *****************************************************************************
# Start the database

- name: start container (mysql)
  docker_container:
    comparisons: {'*': strict}
    detach: true
    image: '{{ mantisbt_db_image_name }}'
    name: '{{ mantisbt_db_container_name }}'
    restart_policy: '{{ docker_restart_policy }}'
    volumes:
      - '{{ mantisbt_db_config_dir }}:/etc/mysql/conf.d:z'
      - '{{ mantisbt_db_dv_name }}:/var/lib/mysql:z'
    env:
      MYSQL_DATABASE: '{{ mantisbt_database_name }}'
      MYSQL_ROOT_PASSWORD: '{{ mantisbt_db_root_password }}'
      MYSQL_USER: '{{ mantisbt_db_username }}'
      MYSQL_PASSWORD: '{{ mantisbt_db_password }}'
    networks:
      - name: '{{ docker_network_frontend }}'
    purge_networks: true
    restart: '{{ mysql_config.changed }}'
    state: started

- name: wait for initialization to complete
  shell: >
      printf 'SHOW GLOBAL STATUS\n' | docker exec -i
      '{{ mantisbt_db_container_name }}'
      mysql --host=localhost
      --user='root'
      --password={{ mantisbt_db_root_password | quote }}
      '{{ mantisbt_database_name }}'
  register: db_status
  retries: 20
  delay: 3
  until: "db_status.rc == 0"

# *****************************************************************************
# Start the data container running

- name: start container (mantisbt)
  docker_container:
    comparisons: {'*': strict}
    detach: true
    env:
      MANTISBT_HOSTNAME: '{{ mantisbt_hostname }}'
    hostname: '{{ mantisbt_container_name }}'
    image: '{{ mantisbt_image_name }}:{{ docker_image_tag }}'
    name: '{{ mantisbt_container_name }}'
    networks:
      - name: '{{ docker_network_frontend }}'
        aliases:
          - '{{ mantisbt_hostname }}'
        links:
          - '{{ openldap_container_name }}:mantisbt_ldap'
          - '{{ mantisbt_db_container_name }}:mantisbt_db'
    ports: '{{ mantisbt_port_args }}'
    purge_networks: true
    restart: '{{ config_sh.changed or config_inc.changed }}'
    restart_policy: '{{ docker_restart_policy }}'
    state: started
    volumes:
      - '{{ openssl_dv_name }}:/etc/ssl/private:z'
      - '{{ mantisbt_config_dir }}:/var/www/html/config/'

# *****************************************************************************
# Start the monitoring container running

- name: start container (mantisbt_monitor)
  docker_container:
    command:
      - "--scrape-uri={{ mantisbt_monitor_scrape_uri }}"
      - "--telemetry.address={{ mantisbt_monitor_telemetry_address }}"
      - "--telemetry.endpoint={{ mantisbt_monitor_telemetry_endpoint }}"
    comparisons: {'*': strict}
    detach: true
    image: '{{ mantisbt_monitor_image_name }}'
    name: '{{ mantisbt_monitor_container_name }}'
    networks:
      - name: '{{ docker_network_frontend }}'
    purge_networks: true
    restart_policy: '{{ docker_restart_policy }}'
    state: started


# *****************************************************************************
# restore?

- include_tasks: restore.yml
  when: st_mantisbt_restore.stat.exists == False

---
# defaults file for ansible-haproxy

haproxy_port_args: []

# image_name: "haproxy:2.0-alpine"

config_cert_path: /etc/ssl/private

# host path containing configuration files
# config_hostdir: "{{ docker_restore_config_base_dir }}/{{ container_name }}"

# environment passed to the container
# container_env: {}

# hostname
# container_hostname: "{{ container_name }}"

# the name of the container being started
# container_name: "{{ docker_name_prefix }}haproxy"

# networks of the container
container_networks:
  - name: '{{ docker_network_frontend }}'
    aliases:
      - '{{ container_hostname }}'

# exposed ports of the container
# container_port_args: '{{ haproxy_port_args }}'

# container_volumes:
# - "{{ config_hostdir }}:/usr/local/etc/haproxy:ro"
# - "{{ openssl_dv_name }}:{{ config_cert_path }}:z"

service_configs:
- config_id: "{{ haproxy_cfg.config_id }}"
  config_name: "haproxy_cfg"
  filename: "/usr/local/etc/haproxy/haproxy.cfg"

service_image: "haproxy:2.0-alpine"

service_name: "{{ docker_name_prefix }}haproxy"

service_placement:
  constraints:
  - node.role == manager

service_publish:
- mode: ingress
  protocol: tcp
  published_port: 80
  target_port: 80
- mode: ingress
  protocol: tcp
  published_port: 443
  target_port: 443
- mode: ingress
  protocol: tcp
  published_port: 9000
  target_port: 9000

service_secrets:
- filename: "{{ config_cert_path }}/haproxy.pem"
  gid: 0
  mode: 0600
  secret_id: "{{ haproxy_cert.secret_id }}"
  secret_name: "haproxy_cert"
  uid: 0
- filename: "{{ config_cert_path }}/dhparam.pem"
  gid: 0
  mode: 0600
  secret_id: "{{ haproxy_dhparam.secret_id }}"
  secret_name: "haproxy_dhparam"
  uid: 0
